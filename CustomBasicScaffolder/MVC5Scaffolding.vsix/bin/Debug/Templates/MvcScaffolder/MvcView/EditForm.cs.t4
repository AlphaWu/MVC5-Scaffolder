﻿<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>

<# var primaryKey = ModelMetadata.PrimaryKeys[0].PropertyName; #>

 @*@Html.HiddenFor(model => model.<#= primaryKey #>)*@



<#
        // "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
        string boolType = "System.Boolean";
        Version requiredMvcVersion = new Version("5.1.0.0");
        bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
        // The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
    if (!CheckedFromLayoutCols) {
        foreach (PropertyMetadata property in ModelMetadata.Properties.Where(n=>n.Scaffold && !n.IsAutoGenerated)) {
            if (property.Scaffold && !property.IsReadOnly && !property.IsAssociation) {

                // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
                if (property.IsPrimaryKey && IsPropertyGuid(property)) {
                      continue;
                }
#>
<#      if (property.IsPrimaryKey  && !property.IsAutoGenerated  ){  #>
		@*Primary Key with editable*@
        <div class="form-group">
            @Html.LabelFor(model => model.<#=                                property.PropertyName #>,   htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <#                            if (property.ShortTypeName=="DateTime") { #>
                @Html.EditorFor(model => model.<#=                                    property.PropertyName #>, "Date" ,new { htmlAttributes = new { @class = "form-control" } })
                <#                            }else { #>
                @Html.EditorFor(model => model.<#=                                    property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
                <#                            } #>
                @Html.ValidationMessageFor(model => model.<#=                                property.PropertyName #>,"" , new { @class = "text-danger" })
            </div>
        </div>
		
<#                } else if (property.IsForeignKey) {  #>
		<div class="form-group">
            @Html.LabelFor(model => model.<#=                        property.PropertyName #>,   htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
			    @Html.DropDownListFor(model => model.<#=     property.PropertyName #>, ViewBag.<#=                        property.PropertyName #> as List<SelectListItem>,"---Select---", htmlAttributes: new { @class = "form-control" }) 
                @Html.ValidationMessageFor(model => model.<#=                        property.PropertyName #>,"" , new { @class = "text-danger" })
            </div>
        </div>
<#                } else { #>
        <div class="form-group">
            @Html.LabelFor(model => model.<#=                        property.PropertyName #>,   htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <#                    if (property.ShortTypeName=="DateTime") { #>
                @Html.EditorFor(model => model.<#=                            property.PropertyName #>, "Date" ,new { htmlAttributes = new { @class = "form-control" } })
                <#                    }else { #>
                @Html.EditorFor(model => model.<#=                            property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
                <#                    } #>
                @Html.ValidationMessageFor(model => model.<#=                        property.PropertyName #>,"" , new { @class = "text-danger" })
            </div>
        </div>
<#                } #>
<# 
            }
        }
    } else { #>
    <div class="row">
<#             
        string layoutcss =String.Format("col-lg-{0} col-md-{0} col-sm-{0}" ,    12/FromLayoutCols);
		string labelcolsize="";
		string fieldcolsize="";
		if(FromLayoutCols==2){
			labelcolsize=" col-md-3 col-sm-3";
			fieldcolsize=" col-md-9 col-sm-9";
        }else if (FromLayoutCols==3){
			labelcolsize=" col-md-4 col-sm-4";
			fieldcolsize=" col-md-8 col-sm-8";
        } else{
			labelcolsize="";
			fieldcolsize="";
        }
       
#>
         

        <#  var outputProperties= ModelMetadata.Properties.Where(n=>n.Scaffold && !n.IsReadOnly && !n.IsAssociation  && !n.IsAutoGenerated  ).ToList();
            int colscount = outputProperties.Count;
            foreach (PropertyMetadata property in outputProperties)
            {
#>
			<# if (property.IsPrimaryKey && !property.IsAutoGenerated ){ #>
   
     <div class="form-group <#= layoutcss  #>">
			<#  if (FromLayoutCols < 3 ) { #>
            @Html.LabelFor(model => model.<#=                                property.PropertyName #>,   htmlAttributes: new { @class = "control-label <#= labelcolsize #>" })
            <div class="<#= fieldcolsize #>">
                <#                            if (property.ShortTypeName=="DateTime") { #>
                @Html.EditorFor(model => model.<#=                                    property.PropertyName #>, "Date" ,new { htmlAttributes = new { @class = "form-control" } })
                <#                            }else { #>
                @Html.EditorFor(model => model.<#=                                    property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
                <#                            } #>
                @Html.ValidationMessageFor(model => model.<#=                                property.PropertyName #>,"" , new { @class = "text-danger" })
            </div>
			<# } else { #>
				@Html.LabelFor(model => model.<#=                                property.PropertyName #>,   htmlAttributes: new { @class = "control-label" })
                <#                            if (property.ShortTypeName=="DateTime") { #>
                @Html.EditorFor(model => model.<#=                                    property.PropertyName #>, "Date" ,new { htmlAttributes = new { @class = "form-control" } })
                <#                            }else { #>
                @Html.EditorFor(model => model.<#=                                    property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
                <#                            } #>
                @Html.ValidationMessageFor(model => model.<#=                                property.PropertyName #>,"" , new { @class = "text-danger" })
           
			<# } #>
        </div>

<#  } else if (property.IsForeignKey) {  #>
		<div class="form-group <#= layoutcss  #>">
		    <#  if (FromLayoutCols < 3 ) { #>
            @Html.LabelFor(model => model.<#=                                property.PropertyName #>,   htmlAttributes: new { @class = "control-label <#= labelcolsize #>" })
            <div class="<#= fieldcolsize #>">
                @Html.DropDownListFor(model => model.<#=     property.PropertyName #>, ViewBag.<#=                        property.PropertyName #> as List<SelectListItem>,"---Select---", htmlAttributes: new { @class = "form-control" }) 
                @Html.ValidationMessageFor(model => model.<#=                                property.PropertyName #>,"" , new { @class = "text-danger" })
            </div>
			<# } else { #>
		 
				@Html.LabelFor(model => model.<#=                                property.PropertyName #>,   htmlAttributes: new { @class = "control-label" })
                @Html.DropDownListFor(model => model.<#=     property.PropertyName #>, ViewBag.<#=                        property.PropertyName #> as List<SelectListItem>,"---Select---", htmlAttributes: new { @class = "form-control" }) 
                @Html.ValidationMessageFor(model => model.<#=                                property.PropertyName #>,"" , new { @class = "text-danger" })
           
			<# } #>
        </div>
<#   } else { #>
        <div class="form-group <#= layoutcss  #>">
			<#  if (FromLayoutCols < 3 ) { #>
            @Html.LabelFor(model => model.<#=                                property.PropertyName #>,   htmlAttributes: new { @class = "control-label <#= labelcolsize #>" })
            <div class="<#= fieldcolsize #>">
                <#                            if (property.ShortTypeName=="DateTime") { #>
                @Html.EditorFor(model => model.<#=                                    property.PropertyName #>, "Date" ,new { htmlAttributes = new { @class = "form-control" } })
                <#                            }else { #>
                @Html.EditorFor(model => model.<#=                                    property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
                <#                            } #>
                @Html.ValidationMessageFor(model => model.<#=                                property.PropertyName #>,"" , new { @class = "text-danger" })
            </div>
			<# } else { #>
			 @Html.LabelFor(model => model.<#=                                property.PropertyName #>,   htmlAttributes: new { @class = "control-label " })
            
                <#                            if (property.ShortTypeName=="DateTime") { #>
                @Html.EditorFor(model => model.<#=                                    property.PropertyName #>, "Date" ,new { htmlAttributes = new { @class = "form-control" } })
                <#                            }else { #>
                @Html.EditorFor(model => model.<#=                                    property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
                <#                            } #>
                @Html.ValidationMessageFor(model => model.<#=                                property.PropertyName #>,"" , new { @class = "text-danger" })
            
			<# } #>
        </div>
<#      }
                    }
                
#>
<# 
            
             #>
   
<#        } #>
		
		<!-- output all Scaffold = false Hiden field -->
		<#   foreach (PropertyMetadata hidenproperty in ModelMetadata.Properties.Where(n=>(!n.Scaffold || n.IsReadOnly) && !n.IsAssociation)) { #>
			@Html.HiddenFor(model => model.<#= hidenproperty.PropertyName #>)
		<# } #>
		<!--end output all Scaffold = false Hiden field -->
    </div>

<#  #>

<#
    if( GenerateMasterDetailRelationship && OneToManyModelMetadata.Count>0)
    {
#>
    <!-- details tabs -->
    <div class="tabs-container">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs">
<#
		var idx=0;
        foreach (PropertyMetadata property in ModelMetadata.Properties) 
        {
			
            if ( property.AssociationDirection == AssociationDirection.OneToMany && OneToManyModelMetadata.ContainsKey(property.PropertyName))
            {
#>
				<#  if(idx==0)  {#>
				<li class="active"><a data-toggle="tab" href="#tab-<#=property.PropertyName   #>"> <#= GetDisplayName(property.PropertyName) #></a></li>
				<# } else { #>
				<li class=""><a data-toggle="tab" href="#tab-<#=property.PropertyName   #>"> <#= GetDisplayName(property.PropertyName) #></a></li>	 		 
				<# } #>
				        
			 
<# 
				idx ++;
            }
        }
#>   
		 </ul>
		 <!-- Tab panes -->
         <div class="tab-content">
		  <#
			idx=0;
        foreach (PropertyMetadata property in ModelMetadata.Properties) 
        {
            if (property.AssociationDirection == AssociationDirection.OneToMany && OneToManyModelMetadata.ContainsKey(property.PropertyName))
            {
                var childrenmodelmeta=OneToManyModelMetadata[property.PropertyName];
				var detailmodelnameVar=property.PropertyName.ToLower();
          #>
		  <div id="tab-<#=property.PropertyName   #>" class="tab-pane <#= idx>0?"":"active"  #>">

            <div class="panel-body">

                <div class="table-responsive">
				<table id="<#= detailmodelnameVar  #>_datagrid" class="easyui-datagrid" title="<#=property.PropertyName   #> DataGrid" style="width:auto;height:400px"
                       data-options="
                            rownumbers:true,
                            iconCls: 'fa fa-list',
                            remoteFilter: false,
                            singleSelect: true,
                            toolbar: '#<#= detailmodelnameVar #>_toolbar',
                            method: 'get',
                            onClickCell: <#= detailmodelnameVar #>_onClickCell,
                            pagination: 'true'
                    " >
                    <thead>
                        <tr>
						@*<th data-options="field:'ck',checkbox:true"></th>*@
				<#
IEnumerable<PropertyMetadata> subproperties = childrenmodelmeta.Properties;
foreach (PropertyMetadata subproperty in subproperties) {
        var tdalign=subproperty.ShortTypeName=="string"?"left":"right";
		var fieldtypename = subproperty.ShortTypeName;
    if (subproperty.Scaffold && !subproperty.IsAssociation) {
#>
<#
        // We do not want to show any association properties for which there is
        // no associated foreign key.
        //if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
        //    continue;
        //}
#>
        <# if ( subproperty.IsPrimaryKey || subproperty.IsReadOnly) { #>
			<th data-options="field:'<#= subproperty.PropertyName  #>',width:80">@Html.DisplayNameFor(model => model.<#=  subproperty.PropertyName #>)</th>
        <# } else if (subproperty.IsForeignKey) { 
			   string foreignKeyPropertyName = subproperty.PropertyName;
			   RelatedModelMetadata relatedModel = GetRelatedModelMetadata(foreignKeyPropertyName,ModelMetadata);
		#>
			<th data-options="field:'<#= foreignKeyPropertyName  #>',width:100,
                        formatter:function(value,row){
                            return row.<#= GetRelatedDisplayNameExpression(foreignKeyPropertyName,ModelMetadata)  #>;
                        },
                        editor:{
                            type:'combobox',
                            options:{
                                valueField:'<#= relatedModel.PrimaryKeyNames[0]  #>',
                                textField:'<#= relatedModel.DisplayPropertyName   #>',
                                method:'get',
                                url:'/<#= ControllerRootName #>/Get<#=  relatedModel.EntitySetName  #>',
                                required:true
                            }
                        }">@Html.DisplayNameFor(model => model.<#= foreignKeyPropertyName #>)</th>

           
        <# } else { #>

		<#
			if(fieldtypename=="string") {
		#>
		     <th data-options="field:'<#= subproperty.PropertyName #>',width:140,editor:{type:'textbox',options:{required:false} } ">@Html.DisplayNameFor(model => model.<#= subproperty.PropertyName #>)</th>
		<# } else if(fieldtypename=="int" || fieldtypename=="float"|| fieldtypename=="decimal") {
		#>
		     <th data-options="field:'<#=  subproperty.PropertyName  #>',width:100,align:'right',editor:{type:'numberbox',options:{precision:2}}">@Html.DisplayNameFor(model => model.<#= subproperty.PropertyName #>)</th>
		<# } else if(fieldtypename=="DateTime" ) {
		#>
		     <th data-options="field:'<#=  subproperty.PropertyName  #>',width:160,align:'right',editor:{type:'datetimebox',options:{}}">@Html.DisplayNameFor(model => model.<#= subproperty.PropertyName #>)</th>
		<# } else { #>
			 <th data-options="field:'<#= subproperty.PropertyName #>',width:120,editor:'textbox' ">@Html.DisplayNameFor(model => model.<#= subproperty.PropertyName #>)</th>
		<# } #>

        <#            } #>
<#
    }
}
#>
                           
                        </tr>
                    </thead>
                </table>

				<div id="<#= detailmodelnameVar #>_toolbar" style="height:auto">
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-add',plain:true" onclick="<#= detailmodelnameVar #>_append()">Append</a>
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-remove',plain:true" onclick="<#= detailmodelnameVar #>_removeit()">Remove</a>
                    @*<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-save',plain:true" onclick="<#= detailmodelnameVar #>_accept()">Accept</a>*@
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-undo',plain:true" onclick="<#= detailmodelnameVar #>_reject()">Reject</a>
                    @*<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-search',plain:true" onclick="<#= detailmodelnameVar #>_getChanges()">GetChanges</a>*@
                </div>

                </div>
            </div>

		  <# idx++;
            }
        }
		  #>

	</div>
</div>
 
<!--end details tabs -->
 


<#  if(GenerateMasterDetailRelationship  && OneToManyModelMetadata.Count >0) { 
	var primaryKeyVar = ModelTypeName.ToLower() + primaryKey.ToLower();
#>
<script type="text/javascript">
	
	  <# foreach(var item in OneToManyModelMetadata) {
                var boostraptablevar = "$" + item.Key.ToLower()  + "datagrid";
                var detailnamevar=item.Key.ToLower();
				var submodelmetadata =  item.Value;
      #>  
	var <#= detailnamevar #>editIndex = undefined;
    function <#= detailnamevar #>_endEditing() {
        if (<#= detailnamevar #>editIndex == undefined) { return true }
        if (<#= boostraptablevar #>.datagrid('validateRow', editIndex)) {
			<# 
				RelatedModelMetadata[] relmodelms = submodelmetadata.RelatedEntities;
				foreach(RelatedModelMetadata relmodelm in relmodelms) 
                {
					var fkeyname=relmodelm.ShortTypeName +  relmodelm.PrimaryKeyNames[0];
					var fdispname = relmodelm.ShortTypeName + relmodelm.DisplayPropertyName;

			#>
            var ed = <#= boostraptablevar #>.datagrid('getEditor', { index: editIndex, field: '<#= fkeyname #>' });
            var <#= fdispname #> = $(ed.target).combobox('getText');
            var <#= fkeyname #> = $(ed.target).combobox('getValue');
          
            <#= boostraptablevar #>.datagrid('getRows')[editIndex]['<#= fdispname #>'] = <#= fdispname #>;
            <#= boostraptablevar #>.datagrid('getRows')[editIndex]['<#= fkeyname #>'] = <#= fkeyname #>;
            <#= boostraptablevar #>.datagrid('endEdit', editIndex);
            
			<# 
                }
			#>

            <#= detailnamevar #>editIndex = undefined;


            return true;
        } else {
            return false;
        }
    }
    function <#= detailnamevar #>_onClickCell(index, field) {
        if (editIndex != index) {
            if (endEditing()) {
                <#= boostraptablevar #>.datagrid('selectRow', index)
                        .datagrid('beginEdit', index);
                var ed = <#= boostraptablevar #>.datagrid('getEditor', { index: index, field: field });
                if (ed) {
                    ($(ed.target).data('textbox') ? $(ed.target).textbox('textbox') : $(ed.target)).focus();
                }
                 <#= detailnamevar #>editIndex = index;
            } else {
                <#= boostraptablevar #>.datagrid('selectRow', editIndex);
            }
        }
    }
    function <#= detailnamevar #>_append() {
        if (endEditing()) {
            <#= boostraptablevar #>.datagrid('appendRow', { status: 'P' });
            <#= detailnamevar #>editIndex = <#= boostraptablevar #>..datagrid('getRows').length - 1;
            <#= boostraptablevar #>..datagrid('selectRow', editIndex)
                    .datagrid('beginEdit', editIndex);
        }
    }
    function <#= detailnamevar #>_removeit() {
        if (editIndex == undefined) { return }
        <#= boostraptablevar #>.datagrid('cancelEdit', editIndex)
                .datagrid('deleteRow', editIndex);
        <#= detailnamevar #>editIndex = undefined;
    }
   
    function <#= detailnamevar #>_reject() {
        <#= boostraptablevar #>.datagrid('rejectChanges');
        <#= detailnamevar #>editIndex = undefined;
    }
    function <#= detailnamevar #>_getChanges() {
        var rows = <#= boostraptablevar #>.datagrid('getChanges');
        alert(rows.length + ' rows are changed!');
    }



	  <# } #>


</script>
<# } #>


<#@ include file="ModelMetadataFunctions.cs.include.t4" #>
<#+

	;
string OutputEditorTemplateOrFormAttributes(string typeName){
        return( typeName=="DateTime" ? ", \"Date\"" : ", new { htmlAttributes = new { @class = \"form-control\" } }" );
}
#>