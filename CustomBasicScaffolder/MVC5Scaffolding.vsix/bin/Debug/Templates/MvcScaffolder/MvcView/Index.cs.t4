<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model IEnumerable<#= "<" + ViewDataTypeName + ">" #>

<#
    var modelVariable = ModelMetadata.EntitySetName.ToLower();
    var primaryKeyName = GetPrimaryKeyName(); 
#>


<#
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "<#= ControllerRootName #>";
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}


<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= ControllerRootName #></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<#
    var modelName =  ModelMetadata.EntitySetName;
#>
<div class="row">
    <div class="col-lg-12">
        <div class="ibox float-e-margins">
            <div class="ibox-title">
                <h5><#=  modelName #> Data</h5>
                <div class="ibox-tools">
                    <a class="collapse-link">
                        <i class="fa fa-chevron-up"></i>
                    </a>
                    <a class="dropdown-toggle" data-toggle="dropdown" href="#">
                        <i class="fa fa-wrench"></i>
                    </a>
                    <ul class="dropdown-menu dropdown-user">
                        <li>
                            <a href="table_data_tables.html#">Config option 1</a>
                        </li>
                        <li>
                            <a href="table_data_tables.html#">Config option 2</a>
                        </li>
                    </ul>
                    <a class="close-link">
                        <i class="fa fa-times"></i>
                    </a>
                </div>
            </div>
            <div class="ibox-content">

                <div class="table-responsive">
           
 
       <table id="<#= modelVariable #>_datagrid" class="easyui-datagrid" title="<#= modelName #> DataGrid" style="width:auto;height:auto"
                   data-options="
                 rownumbers:true,
                 
                remoteFilter: true,
                singleSelect: true,
                toolbar: '#<#= modelVariable  #>_toolbar',
                url: '/<#= ControllerRootName #>/GetData',
                method: 'get',
                onClickCell: onClickCell,
                pagination: 'true'
                   ">
                <thead>
                    <tr>
                        @*<th data-options="field:'ck',checkbox:true"></th>*@
<#
IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;
foreach (PropertyMetadata property in properties) {
        var tdalign=property.ShortTypeName=="string"?"left":"right";
		var fieldtypename = property.ShortTypeName;
    if (property.Scaffold && !property.IsAssociation) {
#>
<#
        // We do not want to show any association properties for which there is
        // no associated foreign key.
        //if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
        //    continue;
        //}
#>
        <# if ( property.IsPrimaryKey || property.IsReadOnly) { #>
			<th data-options="field:'<#= property.PropertyName  #>',width:80">@Html.DisplayNameFor(model => model.<#=  property.PropertyName #>)</th>
        <# } else if (property.IsForeignKey) { 
			   string foreignKeyPropertyName = property.PropertyName;
			   RelatedModelMetadata relatedModel = GetRelatedModelMetadata(foreignKeyPropertyName,ModelMetadata);
		#>
			<th data-options="field:'<#= foreignKeyPropertyName  #>',width:100,
                        formatter:function(value,row){
                            return row.<#= GetRelatedDisplayNameExpression(foreignKeyPropertyName,ModelMetadata)  #>;
                        },
                        editor:{
                            type:'combobox',
                            options:{
                                valueField:'<#= relatedModel.PrimaryKeyNames[0]  #>',
                                textField:'<#= relatedModel.DisplayPropertyName   #>',
                                method:'get',
                                url:'/<#= ControllerRootName #>/Get<#=  relatedModel.EntitySetName  #>',
                                required:false
                            }
                        }">@Html.DisplayNameFor(model => model.<#= foreignKeyPropertyName #>)</th>

           
        <# } else { #>

		<#
			if(fieldtypename=="string") {
		#>
		     <th data-options="field:'<#= property.PropertyName #>',width:140,editor:{type:'textbox',options:{required:false} } ">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)</th>
		<# } else if(fieldtypename=="int" || fieldtypename=="float"|| fieldtypename=="decimal") {
		#>
		     <th data-options="field:'<#=  property.PropertyName  #>',width:100,align:'right',editor:{type:'numberbox',options:{precision:0}}">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)</th>
		<# } else if(fieldtypename=="DateTime" ) {
		#>
		     <th data-options="field:'<#=  property.PropertyName  #>',width:160,align:'right',editor:{type:'datetimebox',options:{required:false}} ,formatter:dateformatter">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)</th>
		<# } else { #>
			 <th data-options="field:'<#= property.PropertyName #>',width:120,editor:'textbox' ">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)</th>
		<# } #>

        <#            } #>
<#
    }
}
#>
       
    </tr>
    </thead>
 

</table>
	<div id="<#= modelVariable  #>_toolbar" style="height:auto">
                <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-add',plain:true" onclick="append()">Append</a>
                <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-remove',plain:true" onclick="removeit()">Remove</a>
                <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-save',plain:true" onclick="accept()">Accept</a>
                <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-undo',plain:true" onclick="reject()">Reject</a>
                <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-search',plain:true" onclick="getChanges()">GetChanges</a>
            </div>
				</div>

            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script type="text/javascript">
         var $dg = $('#<#= modelVariable #>_datagrid');
		 var editIndex = undefined;
        function endEditing() {
            if (editIndex == undefined) { return true }
            if ($dg.datagrid('validateRow', editIndex)) {

				<# 
				  foreach(RelatedModelMetadata relatedModel in 	ModelMetadata.RelatedEntities)
				  {
					  string relForeignKey = relatedModel.ForeignKeyPropertyNames[0];
					  string reldisplayname = GetRelatedDisplayNameExpression(relForeignKey,ModelMetadata);
					  
				#>
                var ed = $dg.datagrid('getEditor', { index: editIndex, field: '<#= relForeignKey #>' });
                var <#= reldisplayname.ToLower() #> = $(ed.target).combobox('getText');
                var <#= relForeignKey.ToLower() #> = $(ed.target).combobox('getValue');
                //console.log(categoryname, categoryid);
                //console.log(1,$dg.datagrid('getRows')[editIndex]);
                $dg.datagrid('getRows')[editIndex]['<#= reldisplayname #>'] =  <#= reldisplayname.ToLower() #>;
                $dg.datagrid('getRows')[editIndex]['<#=  relForeignKey #>'] = <#= relForeignKey.ToLower() #>;
                
                //console.log(2,$dg.datagrid('getRows')[editIndex]);

				<# } #>
				$dg.datagrid('endEdit', editIndex);
                editIndex = undefined;

                
                return true;
            } else {
                return false;
            }
        }
        function onClickCell(index, field) {
            if (editIndex != index) {
                if (endEditing()) {
                    $dg.datagrid('selectRow', index)
                            .datagrid('beginEdit', index);
                    var ed = $dg.datagrid('getEditor', { index: index, field: field });
                    if (ed) {
                        ($(ed.target).data('textbox') ? $(ed.target).textbox('textbox') : $(ed.target)).focus();
                    }
                    editIndex = index;
                } else {
                    $dg.datagrid('selectRow', editIndex);
                }
            }
        }
        function append() {
            if (endEditing()) {
                $dg.datagrid('appendRow', { status: 'P' });
                editIndex = $dg.datagrid('getRows').length - 1;
                $dg.datagrid('selectRow', editIndex)
                        .datagrid('beginEdit', editIndex);
            }
        }
        function removeit() {
            if (editIndex == undefined) { return }
            $dg.datagrid('cancelEdit', editIndex)
                    .datagrid('deleteRow', editIndex);
            editIndex = undefined;
        }
        function accept() {
            if (endEditing()) {
                if ($dg.datagrid('getChanges').length) {
                    var inserted = $dg.datagrid('getChanges', "inserted");
                    var deleted = $dg.datagrid('getChanges', "deleted");
                    var updated = $dg.datagrid('getChanges', "updated");
                    var effectRow = new Object();
                    if (inserted.length) {
                        effectRow.inserted = inserted;
                    }
                    if (deleted.length) {
                        effectRow.deleted = deleted;
                    }
                    if (updated.length) {
                        effectRow.updated = updated;
                    }
                    console.log(JSON.stringify(effectRow));
                    $.post("/<#= ControllerRootName #>/SaveData", effectRow, function (rsp) {
                        console.log(rsp);
                        if (rsp.Success) {
                            $.messager.alert("提示", "提交成功！");
                            $dg.datagrid('acceptChanges');
                        }
                    }, "JSON").error(function () {
                        $.messager.alert("错误", "提交错误了！",'error');
                      
                    });
              
                }

                $dg.datagrid('acceptChanges');
            }
        }
        function reject() {
            $dg.datagrid('rejectChanges');
            editIndex = undefined;
        }
        function getChanges() {
            var rows = $dg.datagrid('getChanges');
            alert(rows.length + ' rows are changed!');
        }


		 $(function () {
		  
           $dg.datagrid('enableFilter');
        })
     </script>
}

<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>