
<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="cs" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="System.String" name="DefaultNamespace" #>
<#@ parameter type="System.String" name="ModelNamespace" #>
<#@ parameter type="System.String" name="FolderNamespace" #>
<#@ parameter type="System.String" name="ModelName" #>
<#@ parameter type="System.String" name="PluralizedModelName" #>                    
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.String" name="PrimaryKeyName" #>      
<#@ parameter type="System.String" name="QueryLambdaText" #>     
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Entity.SqlServer;
using Repository.Pattern.Repositories;
using Repository.Pattern.Ef6;
using System.Web.WebPages;
using <#= ModelNamespace #>;
using <#= DefaultNamespace #>.Extensions;

namespace <#=DefaultNamespace #>.Repositories
{
   public class <#= ModelName #>Query:QueryObject<<#= ModelName #>>
    {
        public <#= ModelName #>Query WithAnySearch(string search)
        {
            if (!string.IsNullOrEmpty(search))
                And(<#= QueryLambdaText #>);
            return this;
        }

		public <#= ModelName #>Query WithPopupSearch(string search,string para="")
        {
            if (!string.IsNullOrEmpty(search))
                And(<#= QueryLambdaText #>);
            return this;
        }

		public <#= ModelName #>Query Withfilter(IEnumerable<filterRule> filters)
        {
           if (filters != null)
           {
               foreach (var rule in filters)
               {
                  <#
					IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;
				    foreach (PropertyMetadata property in properties) {
						 if (property.Scaffold && !property.IsAssociation) {
				  #>

					<# 
						if(property.ShortTypeName=="string") {
					#>
						if (rule.field == "<#= property.PropertyName  #>"  && !string.IsNullOrEmpty(rule.value))
						{
							And(x => x.<#= property.PropertyName #>.Contains(rule.value));
						}
				    <# 
					   // end if
						} 
					#>

				    <# 
						if(property.ShortTypeName=="int"  ) {
					#>
						if (rule.field == "<#= property.PropertyName  #>" && !string.IsNullOrEmpty(rule.value) && rule.value.IsInt())
						{
							int val = Convert.ToInt32(rule.value);
							And(x => x.<#= property.PropertyName #> == val);
						}
				    <# 
					   // end if
						} #>

					<# 
						if(property.ShortTypeName=="float" || property.ShortTypeName=="decimal" || property.ShortTypeName=="double") {
					#>
						if (rule.field == "<#= property.PropertyName  #>" && !string.IsNullOrEmpty(rule.value) && rule.value.IsDecimal())
						{
							var val = Convert.ToDecimal(rule.value);
							And(x => x.<#= property.PropertyName #> == val);
						}
				    <# 
					   // end if
						} #>

					<# 
						if(property.ShortTypeName=="DateTime" ) {
					#>
						if (rule.field == "<#= property.PropertyName  #>" && !string.IsNullOrEmpty(rule.value) && rule.value.IsDateTime())
						{	
							var date = Convert.ToDateTime(rule.value) ;
							And(x => SqlFunctions.DateDiff("d", date, x.<#= property.PropertyName #>)>=0);
						}
				   <# 
					   } // end if
				   #>

				    <# 
						if(property.ShortTypeName=="bool" || property.ShortTypeName=="Boolean") {
					#>
						if (rule.field == "<#= property.PropertyName  #>" && !string.IsNullOrEmpty(rule.value) && rule.value.IsBool())
						{	
							 var boolval=Convert.ToBoolean(rule.value);
							 And(x => x.<#= property.PropertyName #> == boolval);
						}
				   <# 
					   } // end if
				   #>
				<# 
					//end if end foreach  
						 }
                    }
				 #>
					
                   
               }
           }
            return this;
        }
    }
}



